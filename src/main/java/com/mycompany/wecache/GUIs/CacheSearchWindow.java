/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.wecache.GUIs;

import com.google.maps.model.LatLng;
import com.mycompany.wecache.BaseClasses.Cache;
import com.mycompany.wecache.Info.JsonHandler;
import com.mycompany.wecache.Info.MapFetcher;
import com.mypopsy.maps.StaticMap.GeoPoint;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;


/**
 *
 * @author User
 */
public class CacheSearchWindow extends JFrame
{
    
    private boolean currentMark;
    private Cache selectedCache;
    private HashSet<Cache> caches;
    private HashSet<Cache> waitlist;

    /**
     * Creates new form CacheSearchWindow
     */
    public CacheSearchWindow()
    {
        
        initComponents();
        
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        caches = new HashSet();
        waitlist = new HashSet();
        
        updateCaches();
        
        this.setVisible(true);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        list_Cache = new javax.swing.JList<String>();
        checkBox_Waitlist = new javax.swing.JCheckBox();
        label_Address = new javax.swing.JLabel();
        button_SelectCache = new javax.swing.JButton();
        textField_Address = new javax.swing.JTextField();
        label_LatLong = new javax.swing.JLabel();
        textField_Latitude = new javax.swing.JTextField();
        textField_Longitude = new javax.swing.JTextField();
        label_SearchRadius = new javax.swing.JLabel();
        textField_SearchRadius = new javax.swing.JTextField();
        button_Search = new javax.swing.JButton();
        button_ClearFilter = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        list_Cache.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                list_CacheValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(list_Cache);

        checkBox_Waitlist.setText("View Waitlist Caches");
        checkBox_Waitlist.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                checkBox_WaitlistStateChanged(evt);
            }
        });

        label_Address.setText("Origin Address");

        button_SelectCache.setText("Select Cache");
        button_SelectCache.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_SelectCacheActionPerformed(evt);
            }
        });

        label_LatLong.setText("Origin Lat/Long Coordinates");

        label_SearchRadius.setText("Search Radius (km.)");

        button_Search.setText("Search");
        button_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_SearchActionPerformed(evt);
            }
        });

        button_ClearFilter.setText("Clear Filter");
        button_ClearFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_ClearFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkBox_Waitlist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(label_Address, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_SelectCache, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(label_LatLong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textField_SearchRadius)
                    .addComponent(button_Search, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_ClearFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textField_Address)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textField_Latitude, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textField_Longitude, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(label_SearchRadius))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(checkBox_Waitlist)
                        .addGap(65, 65, 65)
                        .addComponent(label_Address)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textField_Address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(label_LatLong)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textField_Latitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textField_Longitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(label_SearchRadius)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textField_SearchRadius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(button_Search)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(button_ClearFilter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(button_SelectCache, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkBox_WaitlistStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_checkBox_WaitlistStateChanged
        if (checkBox_Waitlist.isSelected() != currentMark)
        {
            currentMark = checkBox_Waitlist.isSelected();
            updateCaches();
        }
    }//GEN-LAST:event_checkBox_WaitlistStateChanged

    private void list_CacheValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_list_CacheValueChanged
        
        Object name = list_Cache.getSelectedValue();
        
        if (name != null)
        {
            if (checkBox_Waitlist.isSelected())
            {
                Iterator<Cache> values = waitlist.iterator();
                selectedCache = values.next();

                while (values.hasNext() && !selectedCache.toString().equals(name.toString()))
                {
                    selectedCache = values.next();
                }
            }
            else
            {
                Iterator<Cache> values = caches.iterator();
                selectedCache = values.next();

                while (values.hasNext() && !selectedCache.toString().equals(name.toString()))
                {
                    selectedCache = values.next();
                }
            }
        }
        
    }//GEN-LAST:event_list_CacheValueChanged

    private void button_SelectCacheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_SelectCacheActionPerformed
        if (selectedCache != null)
        {
            MainWindow.getSingleton().changeCache(selectedCache);
        }
    }//GEN-LAST:event_button_SelectCacheActionPerformed

    private void button_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_SearchActionPerformed
        String address = textField_Address.getText();
        double latitude;
        double longitude;
        int searchRadius;
        GeoPoint location;
        
        
        if (!textField_SearchRadius.getText().equals("") && textField_SearchRadius.getText().matches("\\d*"))
        {
            searchRadius = Integer.parseInt(textField_SearchRadius.getText());
        }
        else
        {
            searchRadius = 50;
        }
        
        
        if (!(textField_Latitude.getText().equals("") || textField_Longitude.getText().equals("")))
        {
            if (textField_Latitude.getText().matches("-?\\d+\\.?\\d*") && textField_Longitude.getText().matches("-?\\d+\\.?\\d*"))
            {
                latitude = Double.parseDouble(textField_Latitude.getText());
                longitude = Double.parseDouble(textField_Longitude.getText());
                
                if (address.equals(""))
                {
                    address = MapFetcher.locate(latitude, longitude);
                    
                    location = new GeoPoint(latitude, longitude, address);
                }
                else
                {
                    LatLng coords = MapFetcher.locate(address);
                
                    location = new GeoPoint(coords.lat, coords.lng, address);
                }
            }
            else
            {
                if (address.equals(""))
                {
                    JOptionPane.showMessageDialog(this, "Improper input. Please check that your information is correct.");
                    return;
                }
                else
                {
                    LatLng coords = MapFetcher.locate(address);
            
                    location = new GeoPoint(coords.lat, coords.lng, address);
                }
            }
        }
        else if (address.equals("") && textField_Latitude.getText().equals("")
                && textField_Longitude.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "No inputs.");
            return;
        }
        else if (address.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Improper input. Please check that your information is correct.");
            return;
        }
        else
        {
            LatLng coords = MapFetcher.locate(address);
            
            location = new GeoPoint(coords.lat, coords.lng, address);
        }
        
        if (location.latitude() < -90 || location.latitude() > 90)
        {
            JOptionPane.showMessageDialog(this, "Improper input. Please check that your information is correct.");
            return;
        }
        else if (location.longitude() < -180 || location.latitude() > 180)
        {
            JOptionPane.showMessageDialog(this, "Improper input. Please check that your information is correct.");
            return;
        }
        
        ArrayList<Cache> caches;
        
        if (checkBox_Waitlist.isSelected())
        {
            caches = JsonHandler.retrieveWaitlistCaches();
        }
        else
        {
            caches = JsonHandler.retrieveAvailableCaches();
        }
        
        //Use stream to filter caches for caches that are in the range
        List<Cache> filteredCaches = caches.stream()
                                        .filter(i -> i.inRange(location, searchRadius))
                                        .collect(Collectors.toList());
        updateCaches(filteredCaches);
        
    }//GEN-LAST:event_button_SearchActionPerformed

    private void button_ClearFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_ClearFilterActionPerformed
        updateCaches();
    }//GEN-LAST:event_button_ClearFilterActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_ClearFilter;
    private javax.swing.JButton button_Search;
    private javax.swing.JButton button_SelectCache;
    private javax.swing.JCheckBox checkBox_Waitlist;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label_Address;
    private javax.swing.JLabel label_LatLong;
    private javax.swing.JLabel label_SearchRadius;
    private javax.swing.JList<String> list_Cache;
    private javax.swing.JTextField textField_Address;
    private javax.swing.JTextField textField_Latitude;
    private javax.swing.JTextField textField_Longitude;
    private javax.swing.JTextField textField_SearchRadius;
    // End of variables declaration//GEN-END:variables

    public void updateCaches()
    {
        if (checkBox_Waitlist.isSelected())
        {
            waitlist = new HashSet();
            DefaultListModel model = new DefaultListModel();
            ArrayList<Cache> newCaches = JsonHandler.retrieveWaitlistCaches();
            
            for (Cache c : newCaches)
            {
                waitlist.add(c);
                model.addElement(c);
            }
            
            list_Cache.setModel(model);
            
        }
        else
        {
            caches = new HashSet();
            DefaultListModel model = new DefaultListModel();
            List<Cache> newCaches = JsonHandler.retrieveAvailableCaches();
            
            for (Cache c : newCaches)
            {
                caches.add(c);
                model.addElement(c);
            }
            
            list_Cache.setModel(model);
        }
        
    }
    
    private void updateCaches(List<Cache> filteredList)
    {
        if (checkBox_Waitlist.isSelected())
        {
            waitlist = new HashSet();
            DefaultListModel model = new DefaultListModel();
            
            for (Cache c : filteredList)
            {
                waitlist.add(c);
                model.addElement(c);
            }
            
            list_Cache.setModel(model);
            
        }
        else
        {
            caches = new HashSet();
            DefaultListModel model = new DefaultListModel();
            
            for (Cache c : filteredList)
            {
                caches.add(c);
                model.addElement(c);
            }
            
            list_Cache.setModel(model);
        }
        
    }
    
}
